package com.example.filmfilter.View

import ApiClient
import ApiService
import Movie
import MovieResponse
import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.widget.Button
import android.widget.ListView
import androidx.appcompat.app.AppCompatActivity
import com.example.filmfilter.R
import org.json.JSONArray
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class FavoritosActivity : AppCompatActivity() {

    private lateinit var listView: ListView
    private lateinit var adapter: FavoritosAdapter
    private val listaFavoritos = mutableListOf<Movie>()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_favoritos)

        val volver = findViewById<Button>(R.id.btBack)
        volver.setOnClickListener{
            finish()
        }

        listView = findViewById(R.id.listViewFavoritos)

        // Inicializar adaptador con la funci√≥n de eliminar favoritos y abrir detalles
        adapter = FavoritosAdapter(this, listaFavoritos,
            onRemoveFavorite = { pelicula -> eliminarDeFavoritos(pelicula.title) },
            onMovieClick = { title -> buscarDetallesDePelicula(title) }
        )

        listView.adapter = adapter

        cargarFavoritos()
    }

    private fun cargarFavoritos() {
        val sharedPreferences = getSharedPreferences("Favoritos", Context.MODE_PRIVATE)
        val favoritosJson = sharedPreferences.getString("favoritos", "[]") ?: "[]"

        println("üìÇ Datos en SharedPreferences: $favoritosJson") // üî• Depuraci√≥n

        try {
            val favoritosArray = JSONArray(favoritosJson)
            listaFavoritos.clear() // ‚úÖ Limpiamos la lista antes de agregar nuevas pel√≠culas

            if (favoritosArray.length() == 0) {
                println("‚ö†Ô∏è No hay pel√≠culas guardadas en favoritos.")
                return
            }

            for (i in 0 until favoritosArray.length()) {
                val movieTitle = favoritosArray.getString(i)
                fetchMovieByTitle(movieTitle)
            }

        } catch (e: Exception) {
            e.printStackTrace()
            println("‚ùå ERROR al cargar favoritos")
        }
    }



    /**
     * üîç Busca una pel√≠cula en la API por t√≠tulo y la a√±ade a la lista.
     */
    private fun fetchMovieByTitle(title: String) {
        val apiService = ApiClient.retrofit.create(ApiService::class.java)

        apiService.searchMovieByTitle(title, "aeb34317761b06ce97f327fe28f338b0")
            .enqueue(object : Callback<MovieResponse> {
                override fun onResponse(call: Call<MovieResponse>, response: Response<MovieResponse>) {
                    if (response.isSuccessful) {
                        val movieList = response.body()?.results
                        if (!movieList.isNullOrEmpty()) {
                            val movie = movieList[0] // üî• Tomamos la primera coincidencia

                            runOnUiThread {
                                listaFavoritos.add(movie) // ‚úÖ Agregar directamente a lista principal
                                adapter.notifyDataSetChanged() // ‚úÖ Actualizar la UI inmediatamente
                            }

                            println("‚úÖ Pel√≠cula a√±adida a favoritos: ${movie.title}")
                        } else {
                            println("‚ö†Ô∏è No se encontr√≥ la pel√≠cula: $title")
                        }
                    } else {
                        println("‚ùå API ERROR: No se pudo obtener detalles para la pel√≠cula: $title")
                    }
                }

                override fun onFailure(call: Call<MovieResponse>, t: Throwable) {
                    println("‚ùå Error en la API al obtener detalles de la pel√≠cula: $title")
                    t.printStackTrace()
                }
            })
    }




    /**
     * üîç Busca informaci√≥n detallada de una pel√≠cula antes de abrir `DetallesPeliActivity`.
     */
    private fun buscarDetallesDePelicula(title: String) {
        val apiService = ApiClient.retrofit.create(ApiService::class.java)

        apiService.searchMovieByTitle(title, "aeb34317761b06ce97f327fe28f338b0")
            .enqueue(object : Callback<MovieResponse> {
                override fun onResponse(call: Call<MovieResponse>, response: Response<MovieResponse>) {
                    if (response.isSuccessful) {
                        val movieList = response.body()?.results
                        if (!movieList.isNullOrEmpty()) {
                            val movie = movieList[0] // üî• Tomamos la primera coincidencia
                            abrirDetallesPelicula(movie)
                        } else {
                            println("‚ö†Ô∏è No se encontr√≥ informaci√≥n detallada para la pel√≠cula: $title")
                        }
                    }
                }

                override fun onFailure(call: Call<MovieResponse>, t: Throwable) {
                    println("‚ùå Error en la API al obtener detalles de la pel√≠cula: $title")
                }
            })
    }

    /**
     * üé¨ Abre `DetallesPeliActivity` con la informaci√≥n completa de la pel√≠cula.
     */
    private fun abrirDetallesPelicula(movie: Movie) {
        val intent = Intent(this, DetallesPeliActivity::class.java).apply {
            putExtra("id", movie.id)
            putExtra("title", movie.title)
            putExtra("posterPath", movie.poster_path)
            putExtra("overview", movie.overview)
            putExtra("release_date", movie.release_date)
            putExtra("director", movie.director ?: "No disponible")
            putStringArrayListExtra("actors", ArrayList(movie.actors ?: listOf()))
        }

        startActivity(intent)
    }

    /**
     * üóëÔ∏è Elimina una pel√≠cula de favoritos y actualiza la lista.
     */
    private fun eliminarDeFavoritos(title: String) {
        val sharedPreferences = getSharedPreferences("Favoritos", Context.MODE_PRIVATE)
        val editor = sharedPreferences.edit()

        val favoritosJson = sharedPreferences.getString("favoritos", "[]") ?: "[]"
        val favoritosArray = JSONArray(favoritosJson)
        val nuevosFavoritos = JSONArray()

        for (i in 0 until favoritosArray.length()) {
            val favTitle = favoritosArray.getString(i)
            if (favTitle != title) {
                nuevosFavoritos.put(favTitle)
            }
        }

        editor.putString("favoritos", nuevosFavoritos.toString())
        editor.apply()

        listaFavoritos.removeAll { it.title == title }
        adapter.notifyDataSetChanged()

        println("üóëÔ∏è Eliminada de favoritos: $title")
    }

    private fun getTotalFavoritos(): Int {
        val sharedPreferences = getSharedPreferences("Favoritos", Context.MODE_PRIVATE)
        val favoritosJson = sharedPreferences.getString("favoritos", "[]") ?: "[]"
        return JSONArray(favoritosJson).length()
    }
}
